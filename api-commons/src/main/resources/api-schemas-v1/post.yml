openapi: 3.1.0
info:
  title: Post schema components
  version: v1
components:
  schemas:
    # Response DTOs from base service containing scalar reference ID fields (foreign keys):
    BasePostPreviewPageResponse:
      required: [ content, size, totalElements ]
      allOf:
        - $ref: "#/components/schemas/Page"
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/BasePostPreviewResponse"
    BasePostPreviewResponse:
      type: object
      required: [ id, title, excerpt, slug, createdAt, updatedAt, authorId, spaceId ]
      allOf:
        - $ref: "#/components/schemas/PostResponseBase"
        - $ref: "#/components/schemas/PostRefs"
    BasePostDetailsResponse: # DTO from base service containing scalar reference ID fields (foreign keys)
      type: object
      required: [ id, title, excerpt, slug, createdAt, updatedAt, authorId, spaceId, body ]
      allOf:
        - $ref: "#/components/schemas/PostResponseBase"
        - $ref: "#/components/schemas/PostRefs"
        - type: object
          properties:
            body:
              type: string
            votes:
              type: array
              items:
                $ref: "#/components/schemas/PostVote"
    # Response DTOs from aggregator service containing populated reference fields:
    PostPreviewPageResponse:
      required: [ content, size, totalElements ]
      allOf:
        - $ref: "#/components/schemas/Page"
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/PostPreviewResponse"
    PostPreviewResponse: # DTO from aggregator service containing populated reference fields
      type: object
      required: [ id, title, excerpt, slug, createdAt, updatedAt, author ]
      allOf:
        - $ref: "#/components/schemas/PostResponseBase"
        - type: object
          properties:
            author:
              $ref: "#/components/schemas/UserResponse"
    PostDetailsResponse:
      type: object
      required: [ id, title, excerpt, slug, createdAt, updatedAt, body, author ]
      allOf:
        - $ref: "#/components/schemas/PostResponseBase"
        - type: object
          properties:
            body:
              type: string
            author:
              $ref: "#/components/schemas/UserResponse"
            votes:
              type: array
              items:
                $ref: "#/components/schemas/PostVote"
    # Request DTOs:
    CreatePostRequest:
      type: object
      required: [ authorId, spaceId, title, body ]
      properties:
        authorId:
          type: integer
          format: int64
          minimum: 1
        spaceId:
          type: integer
          format: int64
          minimum: 1
        title:
          type: string
          minLength: 1
        body:
          type: string
          minLength: 1
    UpdatePostRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
        body:
          type: string
          minLength: 1
    VoteOnPostRequest:
      type: object
      required: [ value ]
      properties:
        value:
          type: integer
          format: int64
          minimum: -1
          maximum: 1
    # Shared fields:
    PostResponseBase: # fields shared by all post response DTOs
      type: object
      required: [ id, title, excerpt, slug, createdAt, updatedAt ]
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        title:
          type: string
        excerpt:
          type: string
        slug:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        meta:
          type: object
          required: [ id, rating, viewCount, commentCount ]
          properties:
            id:
              type: integer
              format: int64
              minimum: 1
            rating:
              type: integer
              format: int64
            viewCount:
              type: integer
              format: int64
            commentCount:
              type: integer
              format: int64
    PostVote:
      type: object
      required: [ id, userId, value ]
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        userId:
          type: integer
          format: int64
          minimum: 1
        value:
          type: integer
          format: int64
    PostRefs: # scalar reference ID fields (foreign keys)
      type: object
      required: [ authorId, spaceId ]
      properties:
        authorId:
          type: integer
          format: int64
          minimum: 1
        spaceId:
          type: integer
          format: int64
          minimum: 1
    # Refs:
    Page:
      type: Page
    UserResponse:
      type: UserResponse
