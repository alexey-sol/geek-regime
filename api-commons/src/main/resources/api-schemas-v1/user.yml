openapi: 3.1.0
info:
  title: User schema components
  version: v1
components:
  schemas:
    # Response DTOs:
    UserPageResponse:
      required: [ content, size, totalElements ]
      allOf:
        - $ref: "#/components/schemas/Page"
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/UserResponse"
    UserResponse:
      type: object
      required: [ id, email, slug, createdAt, updatedAt, lastSeenAt, details ]
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        email:
          type: string
          format: email
        slug:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lastSeenAt:
          type: string
          format: date-time
        details:
          type: object
          $ref: "#/components/schemas/UserDetails"
        meta:
          type: object
          $ref: "#/components/schemas/UserMeta"
    UserDetails:
      type: object
      required: [ name, image, gender, createdAt, updatedAt ]
      properties:
        name:
          type: string
        description:
          type: string
        about:
          type: string
        image:
          type: string
        gender:
          $ref: "./user.yml#/components/schemas/Gender"
        birthDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UserMeta:
      type: object
      required: [ hasCredentials ]
      properties:
        hasCredentials:
          type: boolean
        hasConfirmedEmail:
          type: boolean
    EmailConfirmationResponse:
      type: object
      properties:
        code:
          type: string
    # Request DTOs:
    CreateUserRequest:
      type: object
      required: [ email, details ]
      properties:
        email:
          type: string
          format: email
          maxLength: 256
        password:
          type: string
          minLength: 1
        details:
          type: object
          $ref: "#/components/schemas/CreateUserDetails"
    CreateUserDetails:
      type: object
      required: [ name ]
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 256
        description:
          type: string
          minLength: 1
          maxLength: 1024
        about:
          type: string
          minLength: 1
        image:
          type: string
          minLength: 1
        gender:
          $ref: "./user.yml#/components/schemas/Gender"
    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 256
        oldPassword:
          type: string
          minLength: 1
        newPassword:
          type: string
          minLength: 1
        details:
          type: object
          $ref: "#/components/schemas/UpdateUserDetails"
    UpdateUserDetails:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 256
        description:
          type: string
          minLength: 1
          maxLength: 1024
        about:
          type: string
          minLength: 1
        image:
          type: string
          minLength: 1
        gender:
          $ref: "./user.yml#/components/schemas/Gender"
        birthDate:
          type: string
          format: date-time
    AuthenticateRequest:
      type: object
      required: [ email, password ]
      properties:
        email:
          type: string
          format: email
          maxLength: 256
        password:
          type: string
          minLength: 1
    HasDisableEmailConfirmation:
      type: object
      properties:
        disableEmailConfirmation:
          type: boolean
    CreateEmailConfirmationRequest:
      type: object
      properties:
        email:
          type: string
          format: email
    ConfirmEmailRequest:
      type: object
      properties:
        code:
          type: string
        email:
          type: string
          format: email
    # Refs:
    Page:
      type: Page
      $ref: "./common.yml#/components/schemas/Page"
    Gender:
      type: string
      enum: [ "BLANK", "MALE", "FEMALE" ]
