openapi: 3.1.0
info:
  title: Schema components
  version: v1
components:
  schemas:
    # User
    UserPageResponse:
      required: [ content, size, totalElements ]
      allOf:
        - $ref: "#/components/schemas/Page"
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/UserResponse"
    UserResponse:
      type: object
      required: [ id, email, slug, createdAt, updatedAt, lastSeenAt, details ]
      properties:
        id:
          type: integer
          format: int64
          min: 1
        email:
          type: string
          format: email
        slug:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        lastSeenAt:
          type: string
          format: date-time
        details:
          type: object
          $ref: "#/components/schemas/UserDetails"
    UserDetails:
      type: object
      required: [ name, image, gender, createdAt, updatedAt ]
      properties:
        name:
          type: string
        description:
          type: string
        about:
          type: string
        image:
          type: string
        gender:
          type: string
          enum: [ "MALE", "FEMALE" ]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CreateUserRequest:
      type: object
      required: [ email, details ]
      properties:
        email:
          type: string
          format: email
          minLength: 1
        password:
          type: string
          minLength: 1
        details:
          type: object
          $ref: "#/components/schemas/CreateUserDetails"
    CreateUserDetails:
      type: object
      required: [ name ]
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
          minLength: 1
        about:
          type: string
          minLength: 1
        image:
          type: string
          minLength: 1
        gender:
          type: string
          enum: [ "MALE", "FEMALE" ]
    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          minLength: 1
        oldPassword:
          type: string
          minLength: 1
        newPassword:
          type: string
          minLength: 1
        details:
          type: object
          $ref: "#/components/schemas/UpdateUserDetails"
    UpdateUserDetails:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string
          minLength: 1
        about:
          type: string
          minLength: 1
        image:
          type: string
          minLength: 1
        gender:
          type: string
          enum: [ "MALE", "FEMALE" ]
    AuthenticateRequest:
      type: object
      required: [ email, password ]
      properties:
        email:
          type: string
          format: email
          minLength: 1
        password:
          type: string
          minLength: 1
    # Post
    UserPostPreviewPageResponse:
      required: [ content, size, totalElements ]
      allOf:
        - $ref: "#/components/schemas/Page"
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/UserPostPreviewResponse"
    PostPreviewPageResponse:
      required: [ content, size, totalElements ]
      allOf:
        - $ref: "#/components/schemas/Page"
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/PostPreviewResponse"
    UserPostDetailsResponse:
      type: object
      required: [ id, title, excerpt, slug, createdAt, updatedAt, body, author ]
      allOf:
        - $ref: "#/components/schemas/BasePost"
        - $ref: "#/components/schemas/HasAuthor"
        - $ref: "#/components/schemas/HasBody"
    PostDetailsResponse:
      type: object
      required: [ id, title, excerpt, slug, createdAt, updatedAt, authorId, spaceId, body ]
      allOf:
        - $ref: "#/components/schemas/BasePost"
        - $ref: "#/components/schemas/PostDependencies"
        - $ref: "#/components/schemas/HasBody"
    UserPostPreviewResponse:
      type: object
      required: [ id, title, excerpt, slug, createdAt, updatedAt, author ]
      allOf:
        - $ref: "#/components/schemas/BasePost"
        - $ref: "#/components/schemas/HasAuthor"
    PostPreviewResponse:
      type: object
      required: [ id, title, excerpt, slug, createdAt, updatedAt, authorId, spaceId ]
      allOf:
        - $ref: "#/components/schemas/BasePost"
        - $ref: "#/components/schemas/PostDependencies"
    CreatePostRequest:
      type: object
      required: [ authorId, spaceId, title, body ]
      properties:
        authorId:
          type: integer
          format: int64
          min: 1
        spaceId:
          type: integer
          format: int64
          min: 1
        title:
          type: string
          minLength: 1
        body:
          type: string
          minLength: 1
    UpdatePostRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
        body:
          type: string
          minLength: 1
    BasePost:
      type: object
      required: [ id, title, excerpt, slug, createdAt, updatedAt ]
      properties:
        id:
          type: integer
          format: int64
          min: 1
        title:
          type: string
        excerpt:
          type: string
        slug:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    PostDependencies:
      type: object
      required: [ authorId, spaceId ]
      properties:
        authorId:
          type: integer
          format: int64
          min: 1
        spaceId:
          type: integer
          format: int64
          min: 1
    # Common
    Page:
      type: object
      required: [ size, totalElements ]
      properties:
        size:
          type: integer
          format: int32
          min: 1
        totalElements:
          type: integer
          format: int64
          min: 0
    IdResponse:
      type: object
      required: [ id ]
      properties:
        id:
          type: integer
          format: int64
          min: 1
    HasBody:
      type: object
      required: [ body ]
      properties:
        body:
          type: string
    HasAuthor:
      type: object
      required: [ author ]
      properties:
        author:
          type: object
          $ref: "#/components/schemas/UserResponse"
